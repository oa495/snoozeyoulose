
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    Await
    Allows your application to perform a "long poll" request that blocks up to a minute or until a change is detected.
*/


var Await = function(session) {
    /*
        Create a new instance of the Await Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/Datastore/Await"
    Await.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new AwaitResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new AwaitInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Await
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var AwaitInputSet = function() {
    AwaitInputSet.super_.call(this);
        /*
        Set the value of the AccessTokenSecret input for this Choreo. ((required, string) The Access Token Secret retrieved during the OAuth process.)
        */
        this.set_AccessTokenSecret = function(value) {
            this.setInput("AccessTokenSecret", value);
        }

        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The Access Token retrieved during the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox (AKA the OAuth Consumer Key).)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the AppSecret input for this Choreo. ((required, string) The App Secret provided by Dropbox (AKA the OAuth Consumer Secret).)
        */
        this.set_AppSecret = function(value) {
            this.setInput("AppSecret", value);
        }

        /*
        Set the value of the Cursors input for this Choreo. ((required, json) A JSON-encoded list of key/value pairs where the key is a datastore handle, and the value is a particular revision. This is required unless specifying Token.)
        */
        this.set_Cursors = function(value) {
            this.setInput("Cursors", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Token input for this Choreo. ((required, string) A dbase64 string which represents a hash of the datastores list. Token values are returned by the ListDatastores choreo. This is required unless specifying Cursors.)
        */
        this.set_Token = function(value) {
            this.setInput("Token", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Await Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var AwaitResultSet = function(resultStream) {
    AwaitResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Dropbox. Corresponds to the ResponseFormat input. Defaults to json.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(Await, choreography.Choreography);
util.inherits(AwaitInputSet, choreography.InputSet);
util.inherits(AwaitResultSet, choreography.ResultSet);
exports.Await = Await;


/*
    DeleteDatastore
    Checks the validity of a private datastore ID or creates a new datastore with the given ID.
*/


var DeleteDatastore = function(session) {
    /*
        Create a new instance of the DeleteDatastore Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/Datastore/DeleteDatastore"
    DeleteDatastore.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteDatastoreResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteDatastoreInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteDatastore
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteDatastoreInputSet = function() {
    DeleteDatastoreInputSet.super_.call(this);
        /*
        Set the value of the AccessTokenSecret input for this Choreo. ((required, string) The Access Token Secret retrieved during the OAuth process.)
        */
        this.set_AccessTokenSecret = function(value) {
            this.setInput("AccessTokenSecret", value);
        }

        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The Access Token retrieved during the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox (AKA the OAuth Consumer Key).)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the AppSecret input for this Choreo. ((required, string) The App Secret provided by Dropbox (AKA the OAuth Consumer Secret).)
        */
        this.set_AppSecret = function(value) {
            this.setInput("AppSecret", value);
        }

        /*
        Set the value of the Handle input for this Choreo. ((required, string) The handle of an existing datastore to delete.)
        */
        this.set_Handle = function(value) {
            this.setInput("Handle", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteDatastore Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteDatastoreResultSet = function(resultStream) {
    DeleteDatastoreResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Dropbox. Corresponds to the ResponseFormat input. Defaults to json.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteDatastore, choreography.Choreography);
util.inherits(DeleteDatastoreInputSet, choreography.InputSet);
util.inherits(DeleteDatastoreResultSet, choreography.ResultSet);
exports.DeleteDatastore = DeleteDatastore;


/*
    GetDeltas
    Returns deltas for a datastore since a given revision.
*/


var GetDeltas = function(session) {
    /*
        Create a new instance of the GetDeltas Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/Datastore/GetDeltas"
    GetDeltas.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetDeltasResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetDeltasInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetDeltas
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetDeltasInputSet = function() {
    GetDeltasInputSet.super_.call(this);
        /*
        Set the value of the AccessTokenSecret input for this Choreo. ((required, string) The Access Token Secret retrieved during the OAuth process.)
        */
        this.set_AccessTokenSecret = function(value) {
            this.setInput("AccessTokenSecret", value);
        }

        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The Access Token retrieved during the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox (AKA the OAuth Consumer Key).)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the AppSecret input for this Choreo. ((required, string) The App Secret provided by Dropbox (AKA the OAuth Consumer Secret).)
        */
        this.set_AppSecret = function(value) {
            this.setInput("AppSecret", value);
        }

        /*
        Set the value of the Handle input for this Choreo. ((required, string) The handle of an existing datastore.)
        */
        this.set_Handle = function(value) {
            this.setInput("Handle", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Revision input for this Choreo. ((required, string) The revision from which to start.)
        */
        this.set_Revision = function(value) {
            this.setInput("Revision", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetDeltas Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetDeltasResultSet = function(resultStream) {
    GetDeltasResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Dropbox. Corresponds to the ResponseFormat input. Defaults to json.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetDeltas, choreography.Choreography);
util.inherits(GetDeltasInputSet, choreography.InputSet);
util.inherits(GetDeltasResultSet, choreography.ResultSet);
exports.GetDeltas = GetDeltas;


/*
    GetOrCreateDatastore
    Checks the validity of a private datastore ID or creates a new datastore with the given ID.
*/


var GetOrCreateDatastore = function(session) {
    /*
        Create a new instance of the GetOrCreateDatastore Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/Datastore/GetOrCreateDatastore"
    GetOrCreateDatastore.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetOrCreateDatastoreResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetOrCreateDatastoreInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetOrCreateDatastore
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetOrCreateDatastoreInputSet = function() {
    GetOrCreateDatastoreInputSet.super_.call(this);
        /*
        Set the value of the AccessTokenSecret input for this Choreo. ((required, string) The Access Token Secret retrieved during the OAuth process.)
        */
        this.set_AccessTokenSecret = function(value) {
            this.setInput("AccessTokenSecret", value);
        }

        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The Access Token retrieved during the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox (AKA the OAuth Consumer Key).)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the AppSecret input for this Choreo. ((required, string) The App Secret provided by Dropbox (AKA the OAuth Consumer Secret).)
        */
        this.set_AppSecret = function(value) {
            this.setInput("AppSecret", value);
        }

        /*
        Set the value of the DatastoreID input for this Choreo. ((required, string) The private ID for a datastore to create or to verify.)
        */
        this.set_DatastoreID = function(value) {
            this.setInput("DatastoreID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetOrCreateDatastore Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetOrCreateDatastoreResultSet = function(resultStream) {
    GetOrCreateDatastoreResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Dropbox. Corresponds to the ResponseFormat input. Defaults to json.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetOrCreateDatastore, choreography.Choreography);
util.inherits(GetOrCreateDatastoreInputSet, choreography.InputSet);
util.inherits(GetOrCreateDatastoreResultSet, choreography.ResultSet);
exports.GetOrCreateDatastore = GetOrCreateDatastore;


/*
    GetSnapshot
    Returns a full snapshot of a datastore.
*/


var GetSnapshot = function(session) {
    /*
        Create a new instance of the GetSnapshot Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/Datastore/GetSnapshot"
    GetSnapshot.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetSnapshotResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetSnapshotInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetSnapshot
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetSnapshotInputSet = function() {
    GetSnapshotInputSet.super_.call(this);
        /*
        Set the value of the AccessTokenSecret input for this Choreo. ((required, string) The Access Token Secret retrieved during the OAuth process.)
        */
        this.set_AccessTokenSecret = function(value) {
            this.setInput("AccessTokenSecret", value);
        }

        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The Access Token retrieved during the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox (AKA the OAuth Consumer Key).)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the AppSecret input for this Choreo. ((required, string) The App Secret provided by Dropbox (AKA the OAuth Consumer Secret).)
        */
        this.set_AppSecret = function(value) {
            this.setInput("AppSecret", value);
        }

        /*
        Set the value of the Handle input for this Choreo. ((required, string) The handle of an existing datastore.)
        */
        this.set_Handle = function(value) {
            this.setInput("Handle", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetSnapshot Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetSnapshotResultSet = function(resultStream) {
    GetSnapshotResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Dropbox. Corresponds to the ResponseFormat input. Defaults to json.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetSnapshot, choreography.Choreography);
util.inherits(GetSnapshotInputSet, choreography.InputSet);
util.inherits(GetSnapshotResultSet, choreography.ResultSet);
exports.GetSnapshot = GetSnapshot;


/*
    InsertRecord
    Inserts a record into a datastore table.
*/


var InsertRecord = function(session) {
    /*
        Create a new instance of the InsertRecord Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/Datastore/InsertRecord"
    InsertRecord.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new InsertRecordResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new InsertRecordInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the InsertRecord
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var InsertRecordInputSet = function() {
    InsertRecordInputSet.super_.call(this);
        /*
        Set the value of the AccessTokenSecret input for this Choreo. ((required, string) The Access Token Secret retrieved during the OAuth process.)
        */
        this.set_AccessTokenSecret = function(value) {
            this.setInput("AccessTokenSecret", value);
        }

        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The Access Token retrieved during the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox (AKA the OAuth Consumer Key).)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the AppSecret input for this Choreo. ((required, string) The App Secret provided by Dropbox (AKA the OAuth Consumer Secret).)
        */
        this.set_AppSecret = function(value) {
            this.setInput("AppSecret", value);
        }

        /*
        Set the value of the Data input for this Choreo. ((required, json) A JSON-encoded list of name/value pairs to insert into the table.)
        */
        this.set_Data = function(value) {
            this.setInput("Data", value);
        }

        /*
        Set the value of the Handle input for this Choreo. ((required, string) The handle of an existing datastore.)
        */
        this.set_Handle = function(value) {
            this.setInput("Handle", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Revision input for this Choreo. ((conditional, string) The revision to which to apply the delta. If not provided, the Choreo will perform a lookup for the latest revision number.)
        */
        this.set_Revision = function(value) {
            this.setInput("Revision", value);
        }

        /*
        Set the value of the RowID input for this Choreo. ((conditional, string) The row identifier. If not provided, a randomly generated GUID will be inserted for this value.)
        */
        this.set_RowID = function(value) {
            this.setInput("RowID", value);
        }

        /*
        Set the value of the Table input for this Choreo. ((required, string) The name of the datastore table.)
        */
        this.set_Table = function(value) {
            this.setInput("Table", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the InsertRecord Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var InsertRecordResultSet = function(resultStream) {
    InsertRecordResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Dropbox. Corresponds to the ResponseFormat input. Defaults to json.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(InsertRecord, choreography.Choreography);
util.inherits(InsertRecordInputSet, choreography.InputSet);
util.inherits(InsertRecordResultSet, choreography.ResultSet);
exports.InsertRecord = InsertRecord;


/*
    ListDatastores
    Retrieves a list of all datastores for the current user.
*/


var ListDatastores = function(session) {
    /*
        Create a new instance of the ListDatastores Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/Datastore/ListDatastores"
    ListDatastores.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ListDatastoresResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ListDatastoresInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ListDatastores
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ListDatastoresInputSet = function() {
    ListDatastoresInputSet.super_.call(this);
        /*
        Set the value of the AccessTokenSecret input for this Choreo. ((required, string) The Access Token Secret retrieved during the OAuth process.)
        */
        this.set_AccessTokenSecret = function(value) {
            this.setInput("AccessTokenSecret", value);
        }

        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The Access Token retrieved during the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox (AKA the OAuth Consumer Key).)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the AppSecret input for this Choreo. ((required, string) The App Secret provided by Dropbox (AKA the OAuth Consumer Secret).)
        */
        this.set_AppSecret = function(value) {
            this.setInput("AppSecret", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ListDatastores Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ListDatastoresResultSet = function(resultStream) {
    ListDatastoresResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Dropbox. Corresponds to the ResponseFormat input. Defaults to json.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ListDatastores, choreography.Choreography);
util.inherits(ListDatastoresInputSet, choreography.InputSet);
util.inherits(ListDatastoresResultSet, choreography.ResultSet);
exports.ListDatastores = ListDatastores;


/*
    PutDelta
    Writes a delta to the server, if the client is up to date.
*/


var PutDelta = function(session) {
    /*
        Create a new instance of the PutDelta Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/Datastore/PutDelta"
    PutDelta.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new PutDeltaResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new PutDeltaInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the PutDelta
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var PutDeltaInputSet = function() {
    PutDeltaInputSet.super_.call(this);
        /*
        Set the value of the AccessTokenSecret input for this Choreo. ((required, string) The Access Token Secret retrieved during the OAuth process.)
        */
        this.set_AccessTokenSecret = function(value) {
            this.setInput("AccessTokenSecret", value);
        }

        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The Access Token retrieved during the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox (AKA the OAuth Consumer Key).)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the AppSecret input for this Choreo. ((required, string) The App Secret provided by Dropbox (AKA the OAuth Consumer Secret).)
        */
        this.set_AppSecret = function(value) {
            this.setInput("AppSecret", value);
        }

        /*
        Set the value of the Changes input for this Choreo. ((required, json) A JSON-encoded list of changes. See Choreo notes for formatting details.)
        */
        this.set_Changes = function(value) {
            this.setInput("Changes", value);
        }

        /*
        Set the value of the Handle input for this Choreo. ((required, string) The handle of an existing datastore.)
        */
        this.set_Handle = function(value) {
            this.setInput("Handle", value);
        }

        /*
        Set the value of the Nonce input for this Choreo. ((optional, string) An optional dbase64 string (up to 100 characters) used to uniquely identify this delta. If set to "default" a nonce will be auto-generated.)
        */
        this.set_Nonce = function(value) {
            this.setInput("Nonce", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to xml or json. Defaults to json.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Revision input for this Choreo. ((required, string) The revision from which to start.)
        */
        this.set_Revision = function(value) {
            this.setInput("Revision", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the PutDelta Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var PutDeltaResultSet = function(resultStream) {
    PutDeltaResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Dropbox. Corresponds to the ResponseFormat input. Defaults to json.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(PutDelta, choreography.Choreography);
util.inherits(PutDeltaInputSet, choreography.InputSet);
util.inherits(PutDeltaResultSet, choreography.ResultSet);
exports.PutDelta = PutDelta;

