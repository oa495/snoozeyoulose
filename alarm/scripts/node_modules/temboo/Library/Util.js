
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    StreamSensorData
    Creates a new label.
*/


var StreamSensorData = function(session) {
    /*
        Create a new instance of the StreamSensorData Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Util/StreamSensorData"
    StreamSensorData.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new StreamSensorDataResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new StreamSensorDataInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the StreamSensorData
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var StreamSensorDataInputSet = function() {
    StreamSensorDataInputSet.super_.call(this);
        /*
        Set the value of the Async input for this Choreo. ((optional, boolean) When set to "true" the request to the data service happens asyncronously. Set to "false" if you want the Choreo to wait for the execution to complete and return API's response.)
        */
        this.set_Async = function(value) {
            this.setInput("Async", value);
        }

        /*
        Set the value of the ClientID input for this Choreo. ((conditional, string) The Client ID provided by the data service.)
        */
        this.set_ClientID = function(value) {
            this.setInput("ClientID", value);
        }

        /*
        Set the value of the ClientSecret input for this Choreo. ((conditional, string) The Client Secret provided by the data service.)
        */
        this.set_ClientSecret = function(value) {
            this.setInput("ClientSecret", value);
        }

        /*
        Set the value of the DatasetID input for this Choreo. ((required, string) The ID of the dataset that your table belongs to.)
        */
        this.set_DatasetID = function(value) {
            this.setInput("DatasetID", value);
        }

        /*
        Set the value of the ProjectID input for this Choreo. ((required, string) The ID of your Google API project.)
        */
        this.set_ProjectID = function(value) {
            this.setInput("ProjectID", value);
        }

        /*
        Set the value of the RefreshToken input for this Choreo. ((conditional, string) An OAuth Refresh Token used to generate a new Access Token when the original token is expired.)
        */
        this.set_RefreshToken = function(value) {
            this.setInput("RefreshToken", value);
        }

        /*
        Set the value of the SensorData input for this Choreo. ((required, json) A JSON object containing key/value pairs.)
        */
        this.set_SensorData = function(value) {
            this.setInput("SensorData", value);
        }

        /*
        Set the value of the Service input for this Choreo. ((required, string) Indicates the service to stream to. Valid values are: BigQuery or Power BI)
        */
        this.set_Service = function(value) {
            this.setInput("Service", value);
        }

        /*
        Set the value of the TableID input for this Choreo. ((required, string) The ID (or name) of the table to insert a row into.)
        */
        this.set_TableID = function(value) {
            this.setInput("TableID", value);
        }

        /*
        Set the value of the TimestampColumn input for this Choreo. ((optional, string) The name of the column that that the choreo will auto-generate a timestamp for.)
        */
        this.set_TimestampColumn = function(value) {
            this.setInput("TimestampColumn", value);
        }

        /*
        Set the value of the TimestampFormat input for this Choreo. ((optional, string) The format of the auto generated timestamp (e.g. yyyy-MM-dd HH:mm:ss.SSS). If set to "milliseconds" or "seconds", the timestamp will be an epoch date.)
        */
        this.set_TimestampFormat = function(value) {
            this.setInput("TimestampFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the StreamSensorData Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var StreamSensorDataResultSet = function(resultStream) {
    StreamSensorDataResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) Contains the response from Google when using the Async=fase option.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
        /*
        Retrieve the value for the "ResponseStatusCode" output from this Choreo execution. ((integer) The response status code from the API.)
        */
        this.get_ResponseStatusCode = function() {
            return this.getResult("ResponseStatusCode");
        }
}

util.inherits(StreamSensorData, choreography.Choreography);
util.inherits(StreamSensorDataInputSet, choreography.InputSet);
util.inherits(StreamSensorDataResultSet, choreography.ResultSet);
exports.StreamSensorData = StreamSensorData;

